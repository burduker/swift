#!/usr/bin/env ruby_noexec_wrapper
#
# This file was generated by RubyGems.
#
# The application 'padrino-core' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

version = ">= 0"

if ARGV.first
  str = ARGV.first
  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
  if str =~ /\A_(.*)_\z/
    version = $1
    ARGV.shift
  end
end

$memstatMAP = {}
$memstatRSS = {}
$timestat = {}
$memMAP = `pmap #{Process.pid} | tail -1`[10..40].strip.to_i
$memRSS = `pmap -x #{Process.pid} | tail -1`[28..40].strip.to_i
$memstatMAP['base'] = $memMAP
$memstatRSS['base'] = $memRSS
$timestamp = Time.now
$timestat['base'] = nil
$level = 0

alias :old_require :require
def require *args
  $level += 1
  $timestat['base'] ||= Time.now - $timestamp
  timestamp = Time.now
  result = old_require *args
  timedelta = Time.now - timestamp
  p "Spent %.6f s %s %s" % [timedelta, ":"*$level, args[0]]
  $timestat[args[0]] ||= 0
  $timestat[args[0]] += timedelta

  oldmemMAP = $memMAP
  $memMAP = `pmap #{Process.pid} | tail -1`[10..40].strip.to_i
  deltaMAP = $memMAP - oldmemMAP
  $memstatMAP[args[0]] ||= 0
  $memstatMAP[args[0]] += deltaMAP

  oldmemRSS = $memRSS
  $memRSS = `pmap -x #{Process.pid} | tail -1`[28..40].strip.to_i
  deltaRSS = $memRSS - oldmemRSS
  $memstatRSS[args[0]] ||= 0
  $memstatRSS[args[0]] += deltaRSS

  $level -= 1
  result
end

gem 'padrino-core', version
load Gem.bin_path('padrino-core', 'padrino', version)

=begin

  $stat = {}
  sum = { map:0, rss:0 }
  if $memstatMAP
    $memstatMAP.inject({}){ |all,one| $stat[one[0]] = [one[1],$memstatRSS[one[0]]] }
    $stat.to_a.sort_by{ |k,v| v[0] }.each do |k,v|
      next  if v[0] == 0 && v[1] == 0
      sum[:map] += v[0]
      sum[:rss] += v[1]
      puts "MAP: #{v[0].to_s.rjust(7)} KB / RSS: #{v[1].to_s.rjust(7)} KB : #{k}"
    end;nil
    puts " MAP: #{sum[:map].to_s.rjust(7)} KB / RSS: #{sum[:rss].to_s.rjust(7)} KB"
  end

  if $timestat
    stat = $timestat.select{ |k,v| v>0 }.to_a.sort{ |a,b| a[1]<=>b[1] }
    summ = 0
    stat.each do |row|
      summ += row[1]
      #puts "%.6f S: #{row[0]}" % row[1]
    end
    #puts summ.to_s.rjust(7) + ' S'
  end
=end
